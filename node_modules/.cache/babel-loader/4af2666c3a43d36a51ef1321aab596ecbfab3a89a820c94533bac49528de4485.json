{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\Group2\\\\src\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// CartContext.js\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Hook for child components to get the cart object\n// and re-render when it changes.\nexport const useCart = () => {\n  _s();\n  return useContext(CartContext);\n};\n_s(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cartItems, setCartItems] = useState([]);\n  const addToCart = product => {\n    setCartItems(currentItems => {\n      const itemIndex = currentItems.findIndex(item => item.id === product.id);\n      if (itemIndex < 0) {\n        // Product not in cart, add as a new entry.\n        return [...currentItems, {\n          ...product,\n          quantity: 1\n        }];\n      } else {\n        // Product exists, update quantity.\n        return currentItems.map((item, index) => index === itemIndex ? {\n          ...item,\n          quantity: item.quantity + 1\n        } : item);\n      }\n    });\n  };\n  const removeFromCart = productId => {\n    setCartItems(currentItems => currentItems.filter(item => item.id !== productId));\n  };\n  const updateQuantity = (productId, quantity) => {\n    setCartItems(currentItems => currentItems.map(item => item.id === productId ? {\n      ...item,\n      quantity: quantity\n    } : item));\n  };\n  const clearCart = () => {\n    setCartItems([]);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      clearCart\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s2(CartProvider, \"jeyeRm/hZ/3zvXF4PAYTLSHDNRs=\");\n_c = CartProvider;\nexport default CartContext;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","CartContext","useCart","_s","CartProvider","children","_s2","cartItems","setCartItems","addToCart","product","currentItems","itemIndex","findIndex","item","id","quantity","map","index","removeFromCart","productId","filter","updateQuantity","clearCart","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Documents/GitHub/Group2/src/CartContext.js"],"sourcesContent":["// CartContext.js\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\n\r\nconst CartContext = createContext();\r\n\r\n// Hook for child components to get the cart object\r\n// and re-render when it changes.\r\nexport const useCart = () => useContext(CartContext);\r\n\r\nexport const CartProvider = ({ children }) => {\r\n    const [cartItems, setCartItems] = useState([]);\r\n\r\n    const addToCart = (product) => {\r\n        setCartItems((currentItems) => {\r\n            const itemIndex = currentItems.findIndex((item) => item.id === product.id);\r\n            if (itemIndex < 0) {\r\n                // Product not in cart, add as a new entry.\r\n                return [...currentItems, { ...product, quantity: 1 }];\r\n            } else {\r\n                // Product exists, update quantity.\r\n                return currentItems.map((item, index) =>\r\n                    index === itemIndex ? { ...item, quantity: item.quantity + 1 } : item\r\n                );\r\n            }\r\n        });\r\n    };\r\n\r\n    const removeFromCart = (productId) => {\r\n        setCartItems((currentItems) => currentItems.filter((item) => item.id !== productId));\r\n    };\r\n\r\n    const updateQuantity = (productId, quantity) => {\r\n        setCartItems((currentItems) =>\r\n            currentItems.map((item) => (item.id === productId ? { ...item, quantity: quantity } : item))\r\n        );\r\n    };\r\n\r\n    const clearCart = () => {\r\n        setCartItems([]);\r\n    };\r\n\r\n    return (\r\n        <CartContext.Provider value={{ cartItems, addToCart, removeFromCart, updateQuantity, clearCart }}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n};\r\n\r\nexport default CartContext;"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA;AACA,OAAO,MAAMM,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMW,SAAS,GAAIC,OAAO,IAAK;IAC3BF,YAAY,CAAEG,YAAY,IAAK;MAC3B,MAAMC,SAAS,GAAGD,YAAY,CAACE,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;MAC1E,IAAIH,SAAS,GAAG,CAAC,EAAE;QACf;QACA,OAAO,CAAC,GAAGD,YAAY,EAAE;UAAE,GAAGD,OAAO;UAAEM,QAAQ,EAAE;QAAE,CAAC,CAAC;MACzD,CAAC,MAAM;QACH;QACA,OAAOL,YAAY,CAACM,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,KAChCA,KAAK,KAAKN,SAAS,GAAG;UAAE,GAAGE,IAAI;UAAEE,QAAQ,EAAEF,IAAI,CAACE,QAAQ,GAAG;QAAE,CAAC,GAAGF,IACrE,CAAC;MACL;IACJ,CAAC,CAAC;EACN,CAAC;EAED,MAAMK,cAAc,GAAIC,SAAS,IAAK;IAClCZ,YAAY,CAAEG,YAAY,IAAKA,YAAY,CAACU,MAAM,CAAEP,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKK,SAAS,CAAC,CAAC;EACxF,CAAC;EAED,MAAME,cAAc,GAAGA,CAACF,SAAS,EAAEJ,QAAQ,KAAK;IAC5CR,YAAY,CAAEG,YAAY,IACtBA,YAAY,CAACM,GAAG,CAAEH,IAAI,IAAMA,IAAI,CAACC,EAAE,KAAKK,SAAS,GAAG;MAAE,GAAGN,IAAI;MAAEE,QAAQ,EAAEA;IAAS,CAAC,GAAGF,IAAK,CAC/F,CAAC;EACL,CAAC;EAED,MAAMS,SAAS,GAAGA,CAAA,KAAM;IACpBf,YAAY,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,oBACIR,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAElB,SAAS;MAAEE,SAAS;MAAEU,cAAc;MAAEG,cAAc;MAAEC;IAAU,CAAE;IAAAlB,QAAA,EAC5FA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACvB,GAAA,CArCWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAuCzB,eAAeH,WAAW;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}